name: Unity Build Workflow

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  UNITY_VERSION: "2019.4.37f1"
  UNITY_PRODUCT_VERSION: "$(cat ${UNITY_BUILD_VERSION_FILE_PATH})"
  UNITY_PROJECT_PATH: ""
  UNITY_BUILD_VERSION_FILE_PATH: "Version.txt"
  BUILD_ARCHIVE_NAME: "Test"
  FIREBASE_STORAGE_BUCKET: "Storage/MetaSchoolLiteData"
  FIREBASE_SERVICE_ACCOUNT_KEY: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}"
  BUILD_TARGET_NAME: "${{ secrets.BUILD_TARGET_ID_WINDOWS64 }}"
  BUILD_NUMBER: ${{ github.run_number }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set Unity project path
        run: |
          echo "Setting Unity project path.."
          UNITY_PROJECT_PATH=$(find "${{ github.workspace }}" -type d -name Assets -print -quit | sed 's/Assets$//')
          echo "Unity project path: ${UNITY_PROJECT_PATH}"
          echo "export UNITY_PROJECT_PATH=${UNITY_PROJECT_PATH}" >> $GITHUB_ENV
                      
      - name: Unity Cloud Build
        run: |
          echo "Starting Unity Cloud Build.."
          response=$(curl -s -X POST \
          https://build-api.cloud.unity3d.com/api/v1/orgs/${{ secrets.ORG_ID }}/projects/${{ secrets.PROJECT_ID }}/buildtargets/${{ secrets.BUILD_TARGET_ID_WINDOWS64 }}/builds \
          -H "Authorization: Basic ${{ secrets.API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"clean": false, "delay": 0, "scm": {"branch": "${{ github.ref }}", "commitId": "${{ github.sha }}", "commitMessage": "${{ github.event.head_commit.message }}", "commitDate": "${{ github.event.head_commit.timestamp }}"}}')
          echo "API response: $response"
          build_id=$(echo $response | jq -r '.[0].build')
          echo "Build ID: $build_id"

          status="pending"
          while [[ "$status" != "success" && "$status" != "failure" && "$status" != "canceled" ]]
          do
            echo "Checking build status..."
            status_response=$(curl -s https://build-api.cloud.unity3d.com/api/v1/orgs/${{ secrets.ORG_ID }}/projects/${{ secrets.PROJECT_ID }}/buildtargets/${{ secrets.BUILD_TARGET_ID_WINDOWS64 }}/builds/$build_id -H "Authorization: Basic ${{ secrets.API_KEY }}")
            echo "API response: $status_response"
            status=$(echo $status_response | jq -r '.buildStatus')
            echo "Build status: $status"
            sleep 5
          done

          if [[ "$status" == "success" ]]
          then
            echo "Build completed successfully."
            echo "Setting artifact path.."
            
            # Call Unity Cloud Build API to get artifact share link
            get_share_id_response=$(curl -s -X GET \
            https://build-api.cloud.unity3d.com/api/v1/orgs/${{ secrets.ORG_ID }}/projects/${{ secrets.PROJECT_ID }}/buildtargets/${{ secrets.BUILD_TARGET_ID_WINDOWS64 }}/builds/$build_id/share
            -H "Authorization: Basic ${{ secrets.API_KEY }}" \
            -H "Content-Type: application/json") 
            shareid=$(echo $status_response | jq -r '.shareid')
            echo "API response: $shareid"

            get_share_link_response=$(curl -s -X GET \
            https://build-api.cloud.unity3d.com/api/v1/shares/{shareid}
            -H "Authorization: Basic ${{ secrets.API_KEY }}" \
            -H "Content-Type: application/json") 
            SHARE_LINK=$(echo $get_build_response | jq -r '.links.download.href')
            echo "API response: $SHARE_LINK"

            # Store SHARE_LINK as an environment variable using export
            export SHARE_LINK=$SHARE_LINK
            echo "Artifact found at $SHARE_LINK"
          else
            echo "Build failed or was canceled."
            exit 1
          fi

      - name: Update Unity build version
        run: |
          echo "Incrementing Unity build version.."
          ls ${UNITY_BUILD_VERSION_FILE_PATH}
          current_version=$(grep -oP '\d+\.\d+\.\d+' "${UNITY_BUILD_VERSION_FILE_PATH}")
          new_version=$(echo "${current_version}" | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
          echo "Current version: ${current_version}"
          echo "New version: ${new_version}"
          sed -i -e "s/${current_version}/${new_version}/g" "${UNITY_BUILD_VERSION_FILE_PATH}"
          echo "${new_version}" > "${UNITY_BUILD_VERSION_FILE_PATH}"
        env:
          UNITY_BUILD_VERSION_FILE_PATH: ${{ env.UNITY_BUILD_VERSION_FILE_PATH }}
          
      - name: Download zip file from URL
        run: |
          curl -L -o "${BUILD_ARCHIVE_NAME}".zip "${{ env.SHARE_LINK }}"
        env:
          BUILD_ARCHIVE_NAME: ${{ env.BUILD_ARCHIVE_NAME }} 

      # - name: Upload build artifact to Firebase App Distribution
      #   uses: w9jds/firebase-action@v1
      #   with:
      #     args: upload ${{ env.BUILD_ARCHIVE_NAME }} Storage/MetaSchoolLiteData
      #     serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}

      # - name: Upload build archive to Firebase Storage
      #   run: |
      #     echo "Uploading build archive to Firebase Storage.."
      #     gsutil cp "${{ env.SHARE_LINK }}" gs://"${FIREBASE_STORAGE_BUCKET}"/"${BUILD_ARCHIVE_NAME}".zip -I -u ${FIREBASE_SERVICE_ACCOUNT_KEY}
      #   env:
      #     FIREBASE_STORAGE_BUCKET: ${{ env.FIREBASE_STORAGE_BUCKET }}
      #     FIREBASE_SERVICE_ACCOUNT_KEY: ${{ env.FIREBASE_SERVICE_ACCOUNT_KEY }}
      #     BUILD_ARCHIVE_NAME: ${{ env.BUILD_ARCHIVE_NAME }}
      
      # - name: Upload Unity build version to Firebase Storage
      #   run: |
      #     echo "Uploading Unity build version to Firebase Storage.."
      #     echo "Unity build version: $UNITY_PRODUCT_VERSION" >> Version.txt
      #     gsutil cp Version.txt gs://${FIREBASE_STORAGE_BUCKET}/Version
      #   env:
      #     UNITY_PRODUCT_VERSION: ${{ env.UNITY_PRODUCT_VERSION }}
      #     FIREBASE_STORAGE_BUCKET: ${{ env.FIREBASE_STORAGE_BUCKET }}
      #     BUILD_TARGET_NAME: ${{ env.BUILD_TARGET_NAME }}
          
      # - name: Commit and push changes
      #   run: |
      #     echo "Committing and pushing changes.."
      #     git config user.name "GitHub Actions"
      #     git config user.email "github-actions@github.com"
      #     git add "${UNITY_BUILD_VERSION_FILE_PATH}"
      #     git commit -m "Update build version to ${UNITY_PRODUCT_VERSION}"
      #     git push
      #   env:
      #     UNITY_BUILD_VERSION_FILE_PATH: ${{ env.UNITY_BUILD_VERSION_FILE_PATH }}
      #     UNITY_PRODUCT_VERSION: ${{ env.UNITY_PRODUCT_VERSION }}

      # - name: Commit and push changes
      #   run: |
      #     echo "Committing and pushing changes.."
      #     git config user.name "GitHub Actions"
      #     git config user.email "github-actions@github.com"
      #     git add "${UNITY_BUILD_VERSION_FILE_PATH}"
      #     git commit -m "Update build version to ${UNITY_PRODUCT_VERSION}"
      #     git push