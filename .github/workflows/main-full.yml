name: Unity Build Workflow

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  UNITY_VERSION: "2019.4.37f1"
  UNITY_BUILD_VERSION_FILE_PATH: "Version.txt"
  BUILD_ARCHIVE_NAME: "Test"
  FIREBASE_STORAGE_BUCKET: "Storage/MetaSchoolLiteData"
  FIREBASE_SERVICE_ACCOUNT_KEY: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}"
  FIREBASE_VERSION_FILE_NAME: "Version.json"
  BUILD_TARGET_NAME: "${{ secrets.BUILD_TARGET_ID_WINDOWS64 }}"
  BUILD_NUMBER: ${{ github.run_number }}
  VERSION_FILE_NAME: "VersionTest.json"
  NEW_VERSION: ""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set Unity project path
        run: |
          echo "Setting Unity project path.."
          UNITY_PROJECT_PATH=$(find "${{ github.workspace }}" -type d -name Assets -print -quit | sed 's/Assets$//')
          echo "Unity project path: ${UNITY_PROJECT_PATH}"
          echo "export UNITY_PROJECT_PATH=${UNITY_PROJECT_PATH}" >> $GITHUB_ENV
                      
      # - name: Unity Cloud Build
      #   run: |
      #     echo "Starting Unity Cloud Build.."
      #     response=$(curl -s -X POST \
      #     https://build-api.cloud.unity3d.com/api/v1/orgs/${{ secrets.ORG_ID }}/projects/${{ secrets.PROJECT_ID }}/buildtargets/${{ secrets.BUILD_TARGET_ID_WINDOWS64 }}/builds \
      #     -H "Authorization: Basic ${{ secrets.API_KEY }}" \
      #     -H "Content-Type: application/json" \
      #     -d '{"clean": false, "delay": 0, "scm": {"branch": "${{ github.ref }}", "commitId": "${{ github.sha }}", "commitMessage": "${{ github.event.head_commit.message }}", "commitDate": "${{ github.event.head_commit.timestamp }}"}}')
      #     echo "API response: $response"
      #     build_id=$(echo $response | jq -r '.[0].build')
      #     echo "Build ID: $build_id"

      #     status="pending"
      #     while [[ "$status" != "success" && "$status" != "failure" && "$status" != "canceled" ]]
      #     do
      #       echo "Checking build status..."
      #       status_response=$(curl -s https://build-api.cloud.unity3d.com/api/v1/orgs/${{ secrets.ORG_ID }}/projects/${{ secrets.PROJECT_ID }}/buildtargets/${{ secrets.BUILD_TARGET_ID_WINDOWS64 }}/builds/$build_id -H "Authorization: Basic ${{ secrets.API_KEY }}")
      #       # echo "API response: $status_response"
      #       status=$(echo $status_response | jq -r '.buildStatus')
      #       echo "Build status: $status"
      #       sleep 5
      #     done

      #     if [[ "$status" == "success" ]]
      #     then
      #       echo "Build completed successfully."
      #       echo "Setting artifact path.."
            
      #       # Call Unity Cloud Build API to get artifact share link
      #       get_share_id_response=$(curl -s -X GET https://build-api.cloud.unity3d.com/api/v1/orgs/${{ secrets.ORG_ID }}/projects/${{ secrets.PROJECT_ID }}/buildtargets/${{ secrets.BUILD_TARGET_ID_WINDOWS64 }}/builds/$build_id/share -H "Authorization: Basic ${{ secrets.API_KEY }}" -H "Content-Type: application/json") 

      #       shareid=$(echo $get_share_id_response | jq -r '.shareid')
      #       echo "API response: $shareid"

      #       get_share_link_response=$(curl -s -X GET https://build-api.cloud.unity3d.com/api/v1/shares/$shareid -H "Authorization: Basic ${{ secrets.API_KEY }}" -H "Content-Type: application/json") 

      #       SHARE_LINK=$(echo $get_share_link_response | jq -r '.links.download_primary.href')
      #       echo "API response: $SHARE_LINK"

      #       # Store SHARE_LINK as an environment variable using export
      #       echo "export SHARE_LINK=${SHARE_LINK}" >> $GITHUB_ENV
      #       echo "Artifact found at ${{ env.SHARE_LINK }}"

      #       echo "Download link: $SHARE_LINK"
      #       curl -L -o ".github/workflows/${{ env.BUILD_ARCHIVE_NAME }}".zip "$SHARE_LINK"

      #     else
      #       echo "Build failed or was canceled."
      #       exit 1
      #     fi

      # install python for running the script
      - name: Setup Python and dependencies
        uses: actions/setup-python@v2
        with:
            python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
            architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      - run: |
          pip install firebase-admin

      # write the Credential json secrect key from git_secrect
      - name: Get secrect key
        id: write_key_file
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'GOOGLE_SERVICE_KEY.json' # name of the written key file
          fileDir: '.github/workflows'
          encodedString: ${{ secrets.GOOGLE_SERVICE_KEY }} # Secret stored in Github secrets 

      # list all files in the directory
      - name: Check all files in temp directory
        run: |
          # list all files in the directory
          ls .github/workflows        
      
      # run the upload script
      - name: run build upload script
        run: python .github/workflows/upload_file_firebase.py "${BUILD_ARCHIVE_NAME}".zip # the path to upload script in the repository
        env:
          BUILD_ARCHIVE_NAME: ${{ env.BUILD_ARCHIVE_NAME }} 

      - name: Update Unity build version and create "Version.text" file
        run: |
          echo "Incrementing Unity build version.."
          ls ${UNITY_BUILD_VERSION_FILE_PATH}
          current_version=$(grep -oP '\d+\.\d+\.\d+' "${UNITY_BUILD_VERSION_FILE_PATH}")
          new_version=$(echo "${current_version}" | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
          echo "Current version: ${current_version}"

          # Set new version as an environment variable
          echo "NEW_VERSION=$(echo "${new_version}" | tr -d '[:space:]')" >> $GITHUB_ENV
          echo "New version: ${new_version}"

          echo "Creating Unity build version json..."
          echo '{"mslGame":"'${new_version}'"}' > .github/workflows/${{ env.VERSION_FILE_NAME }}
          echo "Version.json content:" 
          cat .github/workflows/${{ env.VERSION_FILE_NAME }}
          ls .github/workflows
        env:
          UNITY_BUILD_VERSION_FILE_PATH: ${{ env.UNITY_BUILD_VERSION_FILE_PATH }}
          NEW_VERSION: ${{ env.NEW_VERSION }}

      # - name: Extract mslLauncher value from Firebase Storage
      #   run: |
      #     python .github/workflows/download_file_firebase.py "${FIREBASE_VERSION_FILE_NAME}"
      #     ls .github/workflows

      #     # Extract value from JSON
      #     json=$(cat .github/workflows/${FIREBASE_VERSION_FILE_NAME})
      #     value=$(echo $json | jq -r '.mslLauncher')
      #     echo "New mslLauncher value: $value" 
          
      #     # Modify JSON object to add launcher's key-value pair
      #     new_json=$(echo $json | jq --arg value "${value}" '. + { "mslLauncher": $value }') #New JSON object: mslGame": "new_version","mslLauncher": "mslLauncherVersion"
      #     echo "New JSON object: $new_json" 

      #     # Store new_json as an environment variable using export
      #     echo "NEW_JSON=$(echo "${new_json}" | tr -d '[:space:]')" >> $GITHUB_ENV
      #     echo "New JSON object stored as an environment variable"         
      #   working-directory: ${{ github.workspace }}
      #   env:
      #     FIREBASE_VERSION_FILE_NAME: ${{ env.FIREBASE_VERSION_FILE_NAME }}

      - name: Extract mslLauncher value from Firebase Storage
        run: |
          python .github/workflows/download_file_firebase.py "${FIREBASE_VERSION_FILE_NAME}"
          ls .github/workflows

          # Extract value from JSON
          json=$(cat .github/workflows/${FIREBASE_VERSION_FILE_NAME})
          value=$(echo $json | jq -r '.mslLauncher')
          echo "New mslLauncher value: $value" 
          
          # Modify JSON object to add launcher's key-value pair
          new_json=$(echo "${json}" | jq --arg value "${value}" '. + { "mslLauncher": $value }') #New JSON object: mslGame": "new_version","mslLauncher": "mslLauncherVersion"
          echo "New JSON object: $new_json" 

          # Write modified JSON object to Version.json file
          echo "${new_json}" > .github/workflows/${VERSION_FILE_NAME}
          echo "Version.json updated with mslLauncher value."
        working-directory: ${{ github.workspace }}
        env:
          FIREBASE_VERSION_FILE_NAME: ${{ env.FIREBASE_VERSION_FILE_NAME }}
          VERSION_FILE_NAME: ${{ env.VERSION_FILE_NAME }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: new_json
          path: .github/workflows/new_json.json

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Version_JSON
          path: .github/workflows/Version.json

      - name: Run version upload script
        run: python .github/workflows/upload_file_firebase.py "${VERSION_FILE_NAME}" # the path to upload script in the repository
        env:
          BUILD_ARCHIVE_NAME: ${{ env.BUILD_ARCHIVE_NAME }} 
          VERSION_FILE_NAME: ${{ env.VERSION_FILE_NAME }}

      - name: Commit and push changes
        run: |
          echo "Committing and pushing changes.."
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          git add "${UNITY_BUILD_VERSION_FILE_PATH}"
          git commit -m "Update build version to ${{ env.NEW_VERSION }}"
          git push
